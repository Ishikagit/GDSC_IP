class Solution {
     static ListNode th = null;
    static ListNode tt = null;
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head == null || head.next == null || k == 1){
            return head;
        }
        ListNode oh = null;
        ListNode ot = null;
       int len = size(head);
        ListNode curr = head;
        while(len >= k){
            
            int count = k;
            while(count-- > 0){
                ListNode forw = curr.next;
                curr.next = null;
                addfirst(curr);
                    curr = forw;
            }
            if(oh == null){
                oh = th;
                ot = tt;
            }
            else{
                ot.next = th;
                ot = tt;
            }
            th = null;
            tt = null;
            len -= k;
        }
        ot.next = curr;
        
        return oh;
    }
    public int size(ListNode head){
        if(head == null){
            return 0;
        }
        ListNode temp = head;
        int size = 0;
        while(temp != null){
            size++;
            temp = temp.next;
        }
        
        return size;
    }
   
    public void addfirst(ListNode node){
        if(th == null){
            th = node;
            tt = node;
        }
    node.next = th;
        th = node;
    }
}