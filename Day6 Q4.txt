class LRUCache {
    class Node{
        int key;
        int val;
        Node next;
        Node prev;
    }
    
    HashMap<Integer, Node> hm;
    int cap;
    Node head, tail;
    
    public LRUCache(int capacity) {
        hm = new HashMap<>();
        cap = capacity;
        head = new Node();
        tail = new Node();
        head.next = tail;
        tail.prev = head;
    }
    private void add(Node node){
        Node nbr = head.next;
        node.prev = head;
        node.next = nbr;
        nbr.prev = node;
        head.next = node;
    }
    private void remove(Node node){
        Node nnbr = node.next;
        Node pnbr = node.prev;
        pnbr.next = nnbr;
        nnbr.prev = pnbr;
        node.next = null;
        node.prev = null;
    }
    private void move(Node node){
        remove(node);
        add(node);
    }
    public int get(int key) {
        if(hm.containsKey(key)){
           Node ans = hm.get(key);
            move(ans);
            return ans.val;
        }else{
            return -1;
        }
    }
    
    public void put(int key, int value) {
         if(hm.containsKey(key)){
               Node ans = hm.get(key);
             ans.val = value;
             move(ans);
             
        }else{
        Node to = new Node();
             to.key = key;
             to.val = value;
             if(hm.size() == cap){
                 Node tor = tail.prev;
                 hm.remove(tor.key);
                 remove(tor);
             }
             hm.put(to.key, to);
             add(to);
        }
    }
}